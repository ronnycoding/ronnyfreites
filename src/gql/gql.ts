/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetNodeByURI($uri: String!, $idUri: ID!, $categoryName: String, $first: Int, $last: Int, $after: String, $before: String) {\n  nodeByUri(uri: $uri) {\n    __typename\n    isContentNode\n    isTermNode\n    ... on Post {\n      id\n      title\n      date\n      uri\n      excerpt\n      slug\n      categories {\n        nodes {\n          name\n          uri\n        }\n      }\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          attributes {\n            mediaAlt\n            mediaUrl\n          }\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n      tags(where: {orderby: COUNT, hideEmpty: true}, first: 100) {\n        __typename\n        edges {\n          node {\n            ... on Tag {\n              __typename\n              id\n              name\n              slug\n              uri\n            }\n          }\n        }\n      }\n    }\n    ... on Page {\n      id\n      title\n      uri\n      slug\n      date\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          attributes {\n            mediaAlt\n            mediaUrl\n          }\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n    }\n    ... on Category {\n      id\n      name\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        after: $after\n        last: $last\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  mediaDetails {\n                    height\n                    width\n                  }\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n    ... on Tag {\n      id\n      name\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        last: $last\n        after: $after\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                  mediaDetails {\n                    height\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n  }\n  posts(\n    where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}], categoryName: $categoryName}\n    first: $first\n    last: $last\n    after: $after\n    before: $before\n  ) {\n    __typename\n    edges {\n      cursor\n      node {\n        __typename\n        ... on Post {\n          id\n          title\n          date\n          uri\n          excerpt\n          slug\n          categories(first: 5) {\n            edges {\n              node {\n                ... on Category {\n                  __typename\n                  id\n                  name\n                  slug\n                }\n              }\n            }\n          }\n          tags {\n            edges {\n              node {\n                ... on Tag {\n                  id\n                  name\n                  slug\n                  uri\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n      total\n    }\n  }\n  tag(id: $idUri, idType: URI) {\n    ... on Tag {\n      id\n      name\n      description\n      slug\n      uri\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        last: $last\n        after: $after\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                  mediaDetails {\n                    height\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n  }\n  ...GeneralSettings\n}": types.GetNodeByUriDocument,
    "query GetRssPosts {\n  posts(where: {orderby: [{field: DATE, order: DESC}]}, first: 1000) {\n    __typename\n    edges {\n      node {\n        ... on Post {\n          __typename\n          id\n          slug\n          uri\n          title\n          content\n          excerpt\n          date\n          author {\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  generalSettings {\n    title\n    url\n    description\n  }\n}": types.GetRssPostsDocument,
    "query GetTags {\n  nodeByUri(uri: \"tag\") {\n    __typename\n    ... on Page {\n      id\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n    }\n  }\n  tags(where: {orderby: COUNT, hideEmpty: true}, first: 200) {\n    __typename\n    edges {\n      node {\n        ... on Tag {\n          __typename\n          id\n          name\n          description\n          slug\n          uri\n          count\n        }\n      }\n    }\n  }\n  ...GeneralSettings\n}": types.GetTagsDocument,
    "fragment PostTypeSEOMetadata on PostTypeSEO {\n  __typename\n  canonical\n  cornerstone\n  focuskw\n  metaDesc\n  metaKeywords\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphAuthor\n  opengraphDescription\n  opengraphModifiedTime\n  opengraphPublishedTime\n  opengraphPublisher\n  opengraphSiteName\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  readingTime\n  title\n  twitterDescription\n  twitterTitle\n}": types.PostTypeSeoMetadataFragmentDoc,
    "fragment TaxonomySEOMetadata on TaxonomySEO {\n  canonical\n  cornerstone\n  focuskw\n  fullHead\n  metaDesc\n  metaKeywords\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphAuthor\n  opengraphDescription\n  opengraphImage {\n    altText\n    sourceUrl\n  }\n  opengraphModifiedTime\n  opengraphPublishedTime\n  opengraphPublisher\n  opengraphSiteName\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  schema {\n    raw\n  }\n  title\n  twitterDescription\n  twitterImage {\n    altText\n    sourceUrl\n  }\n  twitterTitle\n}": types.TaxonomySeoMetadataFragmentDoc,
    "fragment WPBlocks on EditorBlock {\n  ... on CoreParagraph {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      content\n      align\n    }\n  }\n  ... on CoreHeading {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      level\n      content\n      align\n    }\n  }\n  ... on CoreList {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      ordered\n    }\n    innerBlocks {\n      ... on CoreListItem {\n        __typename\n        clientId\n        attributes {\n          content\n        }\n      }\n    }\n  }\n  ... on CoreImage {\n    clientId\n    parentClientId\n    __typename\n    mediaDetails {\n      height\n      width\n      sizes {\n        sourceUrl\n        width\n        height\n      }\n    }\n    attributes {\n      alt\n      aspectRatio\n      caption\n      title\n      url\n    }\n  }\n  ... on CoreQuote {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      citation\n      value\n    }\n  }\n  ... on CoreCode {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      content\n    }\n  }\n  ... on CoreButtons {\n    clientId\n    parentClientId\n    __typename\n    innerBlocks {\n      ... on CoreButton {\n        __typename\n        clientId\n        parentClientId\n        attributes {\n          anchor\n          backgroundColor\n          url\n          title\n          rel\n          text\n        }\n      }\n    }\n  }\n}": types.WpBlocksFragmentDoc,
    "fragment GeneralSettings on RootQuery {\n  primaryMenu: menus(where: {location: PRIMARY}) {\n    nodes {\n      __typename\n      name\n      menuItems {\n        nodes {\n          uri\n          url\n          order\n          label\n          id\n          parentId\n        }\n      }\n    }\n  }\n  footerMenu: menus(where: {location: FOOTER}) {\n    nodes {\n      __typename\n      name\n      menuItems {\n        nodes {\n          uri\n          url\n          order\n          label\n          id\n          parentId\n        }\n      }\n    }\n  }\n  generalSettings {\n    title\n    url\n    description\n  }\n}": types.GeneralSettingsFragmentDoc,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetNodeByURI($uri: String!, $idUri: ID!, $categoryName: String, $first: Int, $last: Int, $after: String, $before: String) {\n  nodeByUri(uri: $uri) {\n    __typename\n    isContentNode\n    isTermNode\n    ... on Post {\n      id\n      title\n      date\n      uri\n      excerpt\n      slug\n      categories {\n        nodes {\n          name\n          uri\n        }\n      }\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          attributes {\n            mediaAlt\n            mediaUrl\n          }\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n      tags(where: {orderby: COUNT, hideEmpty: true}, first: 100) {\n        __typename\n        edges {\n          node {\n            ... on Tag {\n              __typename\n              id\n              name\n              slug\n              uri\n            }\n          }\n        }\n      }\n    }\n    ... on Page {\n      id\n      title\n      uri\n      slug\n      date\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          attributes {\n            mediaAlt\n            mediaUrl\n          }\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n    }\n    ... on Category {\n      id\n      name\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        after: $after\n        last: $last\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  mediaDetails {\n                    height\n                    width\n                  }\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n    ... on Tag {\n      id\n      name\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        last: $last\n        after: $after\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                  mediaDetails {\n                    height\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n  }\n  posts(\n    where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}], categoryName: $categoryName}\n    first: $first\n    last: $last\n    after: $after\n    before: $before\n  ) {\n    __typename\n    edges {\n      cursor\n      node {\n        __typename\n        ... on Post {\n          id\n          title\n          date\n          uri\n          excerpt\n          slug\n          categories(first: 5) {\n            edges {\n              node {\n                ... on Category {\n                  __typename\n                  id\n                  name\n                  slug\n                }\n              }\n            }\n          }\n          tags {\n            edges {\n              node {\n                ... on Tag {\n                  id\n                  name\n                  slug\n                  uri\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n      total\n    }\n  }\n  tag(id: $idUri, idType: URI) {\n    ... on Tag {\n      id\n      name\n      description\n      slug\n      uri\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        last: $last\n        after: $after\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                  mediaDetails {\n                    height\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n  }\n  ...GeneralSettings\n}"): (typeof documents)["query GetNodeByURI($uri: String!, $idUri: ID!, $categoryName: String, $first: Int, $last: Int, $after: String, $before: String) {\n  nodeByUri(uri: $uri) {\n    __typename\n    isContentNode\n    isTermNode\n    ... on Post {\n      id\n      title\n      date\n      uri\n      excerpt\n      slug\n      categories {\n        nodes {\n          name\n          uri\n        }\n      }\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          attributes {\n            mediaAlt\n            mediaUrl\n          }\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n      tags(where: {orderby: COUNT, hideEmpty: true}, first: 100) {\n        __typename\n        edges {\n          node {\n            ... on Tag {\n              __typename\n              id\n              name\n              slug\n              uri\n            }\n          }\n        }\n      }\n    }\n    ... on Page {\n      id\n      title\n      uri\n      slug\n      date\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          attributes {\n            mediaAlt\n            mediaUrl\n          }\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n    }\n    ... on Category {\n      id\n      name\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        after: $after\n        last: $last\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  mediaDetails {\n                    height\n                    width\n                  }\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n    ... on Tag {\n      id\n      name\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        last: $last\n        after: $after\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                  mediaDetails {\n                    height\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n  }\n  posts(\n    where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}], categoryName: $categoryName}\n    first: $first\n    last: $last\n    after: $after\n    before: $before\n  ) {\n    __typename\n    edges {\n      cursor\n      node {\n        __typename\n        ... on Post {\n          id\n          title\n          date\n          uri\n          excerpt\n          slug\n          categories(first: 5) {\n            edges {\n              node {\n                ... on Category {\n                  __typename\n                  id\n                  name\n                  slug\n                }\n              }\n            }\n          }\n          tags {\n            edges {\n              node {\n                ... on Tag {\n                  id\n                  name\n                  slug\n                  uri\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n      total\n    }\n  }\n  tag(id: $idUri, idType: URI) {\n    ... on Tag {\n      id\n      name\n      description\n      slug\n      uri\n      posts(\n        where: {status: PUBLISH, orderby: [{field: DATE, order: DESC}]}\n        first: $first\n        last: $last\n        after: $after\n        before: $before\n      ) {\n        edges {\n          cursor\n          node {\n            ... on Post {\n              date\n              title\n              excerpt\n              uri\n              slug\n              categories {\n                nodes {\n                  name\n                  uri\n                }\n              }\n              featuredImage {\n                node {\n                  srcSet\n                  sourceUrl\n                  altText\n                  caption\n                  title\n                  mediaDetails {\n                    height\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          total\n        }\n      }\n      seo {\n        ...TaxonomySEOMetadata\n      }\n    }\n  }\n  ...GeneralSettings\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetRssPosts {\n  posts(where: {orderby: [{field: DATE, order: DESC}]}, first: 1000) {\n    __typename\n    edges {\n      node {\n        ... on Post {\n          __typename\n          id\n          slug\n          uri\n          title\n          content\n          excerpt\n          date\n          author {\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  generalSettings {\n    title\n    url\n    description\n  }\n}"): (typeof documents)["query GetRssPosts {\n  posts(where: {orderby: [{field: DATE, order: DESC}]}, first: 1000) {\n    __typename\n    edges {\n      node {\n        ... on Post {\n          __typename\n          id\n          slug\n          uri\n          title\n          content\n          excerpt\n          date\n          author {\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  generalSettings {\n    title\n    url\n    description\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetTags {\n  nodeByUri(uri: \"tag\") {\n    __typename\n    ... on Page {\n      id\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n    }\n  }\n  tags(where: {orderby: COUNT, hideEmpty: true}, first: 200) {\n    __typename\n    edges {\n      node {\n        ... on Tag {\n          __typename\n          id\n          name\n          description\n          slug\n          uri\n          count\n        }\n      }\n    }\n  }\n  ...GeneralSettings\n}"): (typeof documents)["query GetTags {\n  nodeByUri(uri: \"tag\") {\n    __typename\n    ... on Page {\n      id\n      seo {\n        ...PostTypeSEOMetadata\n      }\n      featuredImage {\n        node {\n          srcSet\n          sourceUrl\n          altText\n          caption\n          title\n          mediaDetails {\n            height\n            width\n          }\n        }\n      }\n      editorBlocks(flat: false) {\n        ...WPBlocks\n        ... on CoreMediaText {\n          __typename\n          clientId\n          parentClientId\n          innerBlocks {\n            ...WPBlocks\n          }\n        }\n      }\n    }\n  }\n  tags(where: {orderby: COUNT, hideEmpty: true}, first: 200) {\n    __typename\n    edges {\n      node {\n        ... on Tag {\n          __typename\n          id\n          name\n          description\n          slug\n          uri\n          count\n        }\n      }\n    }\n  }\n  ...GeneralSettings\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment PostTypeSEOMetadata on PostTypeSEO {\n  __typename\n  canonical\n  cornerstone\n  focuskw\n  metaDesc\n  metaKeywords\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphAuthor\n  opengraphDescription\n  opengraphModifiedTime\n  opengraphPublishedTime\n  opengraphPublisher\n  opengraphSiteName\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  readingTime\n  title\n  twitterDescription\n  twitterTitle\n}"): (typeof documents)["fragment PostTypeSEOMetadata on PostTypeSEO {\n  __typename\n  canonical\n  cornerstone\n  focuskw\n  metaDesc\n  metaKeywords\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphAuthor\n  opengraphDescription\n  opengraphModifiedTime\n  opengraphPublishedTime\n  opengraphPublisher\n  opengraphSiteName\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  readingTime\n  title\n  twitterDescription\n  twitterTitle\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment TaxonomySEOMetadata on TaxonomySEO {\n  canonical\n  cornerstone\n  focuskw\n  fullHead\n  metaDesc\n  metaKeywords\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphAuthor\n  opengraphDescription\n  opengraphImage {\n    altText\n    sourceUrl\n  }\n  opengraphModifiedTime\n  opengraphPublishedTime\n  opengraphPublisher\n  opengraphSiteName\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  schema {\n    raw\n  }\n  title\n  twitterDescription\n  twitterImage {\n    altText\n    sourceUrl\n  }\n  twitterTitle\n}"): (typeof documents)["fragment TaxonomySEOMetadata on TaxonomySEO {\n  canonical\n  cornerstone\n  focuskw\n  fullHead\n  metaDesc\n  metaKeywords\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphAuthor\n  opengraphDescription\n  opengraphImage {\n    altText\n    sourceUrl\n  }\n  opengraphModifiedTime\n  opengraphPublishedTime\n  opengraphPublisher\n  opengraphSiteName\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  schema {\n    raw\n  }\n  title\n  twitterDescription\n  twitterImage {\n    altText\n    sourceUrl\n  }\n  twitterTitle\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment WPBlocks on EditorBlock {\n  ... on CoreParagraph {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      content\n      align\n    }\n  }\n  ... on CoreHeading {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      level\n      content\n      align\n    }\n  }\n  ... on CoreList {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      ordered\n    }\n    innerBlocks {\n      ... on CoreListItem {\n        __typename\n        clientId\n        attributes {\n          content\n        }\n      }\n    }\n  }\n  ... on CoreImage {\n    clientId\n    parentClientId\n    __typename\n    mediaDetails {\n      height\n      width\n      sizes {\n        sourceUrl\n        width\n        height\n      }\n    }\n    attributes {\n      alt\n      aspectRatio\n      caption\n      title\n      url\n    }\n  }\n  ... on CoreQuote {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      citation\n      value\n    }\n  }\n  ... on CoreCode {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      content\n    }\n  }\n  ... on CoreButtons {\n    clientId\n    parentClientId\n    __typename\n    innerBlocks {\n      ... on CoreButton {\n        __typename\n        clientId\n        parentClientId\n        attributes {\n          anchor\n          backgroundColor\n          url\n          title\n          rel\n          text\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment WPBlocks on EditorBlock {\n  ... on CoreParagraph {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      content\n      align\n    }\n  }\n  ... on CoreHeading {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      level\n      content\n      align\n    }\n  }\n  ... on CoreList {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      ordered\n    }\n    innerBlocks {\n      ... on CoreListItem {\n        __typename\n        clientId\n        attributes {\n          content\n        }\n      }\n    }\n  }\n  ... on CoreImage {\n    clientId\n    parentClientId\n    __typename\n    mediaDetails {\n      height\n      width\n      sizes {\n        sourceUrl\n        width\n        height\n      }\n    }\n    attributes {\n      alt\n      aspectRatio\n      caption\n      title\n      url\n    }\n  }\n  ... on CoreQuote {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      citation\n      value\n    }\n  }\n  ... on CoreCode {\n    clientId\n    parentClientId\n    __typename\n    attributes {\n      content\n    }\n  }\n  ... on CoreButtons {\n    clientId\n    parentClientId\n    __typename\n    innerBlocks {\n      ... on CoreButton {\n        __typename\n        clientId\n        parentClientId\n        attributes {\n          anchor\n          backgroundColor\n          url\n          title\n          rel\n          text\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment GeneralSettings on RootQuery {\n  primaryMenu: menus(where: {location: PRIMARY}) {\n    nodes {\n      __typename\n      name\n      menuItems {\n        nodes {\n          uri\n          url\n          order\n          label\n          id\n          parentId\n        }\n      }\n    }\n  }\n  footerMenu: menus(where: {location: FOOTER}) {\n    nodes {\n      __typename\n      name\n      menuItems {\n        nodes {\n          uri\n          url\n          order\n          label\n          id\n          parentId\n        }\n      }\n    }\n  }\n  generalSettings {\n    title\n    url\n    description\n  }\n}"): (typeof documents)["fragment GeneralSettings on RootQuery {\n  primaryMenu: menus(where: {location: PRIMARY}) {\n    nodes {\n      __typename\n      name\n      menuItems {\n        nodes {\n          uri\n          url\n          order\n          label\n          id\n          parentId\n        }\n      }\n    }\n  }\n  footerMenu: menus(where: {location: FOOTER}) {\n    nodes {\n      __typename\n      name\n      menuItems {\n        nodes {\n          uri\n          url\n          order\n          label\n          id\n          parentId\n        }\n      }\n    }\n  }\n  generalSettings {\n    title\n    url\n    description\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;