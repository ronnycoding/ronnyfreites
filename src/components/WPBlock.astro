---
import { Image } from "astro:assets"
import { isGraphType } from "@/utils/types"
import type { WPBlock } from "@/utils/types"
import List from "@/components/List.astro"
import Heading from "@/components/Heading.astro"
import Button from '@/components/Button.astro';
import hljs from 'highlight.js/lib/core';
import javascript from 'highlight.js/lib/languages/javascript';
hljs.registerLanguage('javascript', javascript);
import 'highlight.js/styles/github-dark.css';


export type Props = {
  blocks: WPBlock[]
}

const { blocks } = Astro.props as Props

function transformImageData(data) {
  // Sort sizes from largest to smallest
  const sortedSizes = data.mediaDetails.sizes.sort((a, b) =>
    (b.width * b.height) - (a.width * a.height)
  );

  // Get the largest image for the src attribute
  const largestImage = sortedSizes[0];

  // Create the srcset string
  const srcset = sortedSizes
    .map(size => `${size.sourceUrl} ${size.width}w`)
    .join(', ');

  // Create the image object expected by the HTML structure
  const image = {
    src: largestImage.sourceUrl,
    srcset: srcset,
    width: largestImage.width,
    height: largestImage.height
  };

  return image;
}

function unescapeHTML(str: string): string {
  return str.replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&amp;/g, '&')
            .replace(/&quot;/g, '"')
            .replace(/&#039;/g, "'");
}
---
<!-- image -->
{blocks.map(block => {
  if (isGraphType(block, 'CoreImage')) {
    const transformedImage = transformImageData(block);
    return (
    <div class="max-w-none prose prose-dante sm:prose-lg my-4">
      <figure key={block.clientId}>
        <Image
          src={transformedImage?.src}
          srcset={transformedImage?.srcset}
          loading="lazy"
          decoding="async"
          height={transformedImage?.height}
          width={transformedImage?.width}
          alt={block.attributes?.alt}
        />
        {block.attributes.caption && <figcaption class="mt-1.5 text-xs sm:text-sm">{block.attributes.caption}</figcaption>}
      </figure>
      </div>
    )
  }
  if (isGraphType(block, 'CoreParagraph')) {
    return (<div class="max-w-none prose prose-dante sm:prose-lg my-4">
    <p set:html={block.attributes.content}></p>
    </div>)
  }
  if (isGraphType(block, 'CoreList')) {
    return (
    <div class="max-w-none prose prose-dante sm:prose-lg my-4">
    <List key={block.clientId} block={block} />
    </div>
    )
  }
  if (isGraphType(block, 'CoreHeading')) {
    return (
    <div class="max-w-none prose prose-dante sm:prose-lg my-4">
    <Heading  key={block.clientId} block={block} />
    </div>)
  }
  if (isGraphType(block, 'CoreButtons')) {
    return (
      <div class="max-w-none prose prose-dante sm:prose-lg my-4">
        <Button key={block.clientId} block={block} />
      </div>
    )
  }
  if (isGraphType(block, "CoreCode")) {
    return  (
      <pre class="pre p-y-0">
        <code class="hljs"
        set:html={
          unescapeHTML(hljs.highlightAuto(block.attributes?.content).value)
        } />
      </pre>
    )
  }
  if (block) {
    console.log('Block not supported:', block)
  }
})}
