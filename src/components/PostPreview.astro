---
import ArrowRight from '../icons/ArrowRight.astro';
import FormattedDate from './FormattedDate.astro';
import type { Post } from '@/utils/types'

type Props = { post: Post; class?: string; headingLevel?: 'h2' | 'h3', cursor?: string };

const { post, class: className, headingLevel = 'h2' } = Astro.props;
const { title, date, excerpt, tags } = post;
const TitleTag = headingLevel;
---

<div class:list={["blog-post-container", className]}>
  <a class="flex justify-between flex-col items-start gap-8 group" href={post.uri}>
    <div class="grow">
      <TitleTag
        class="text-xl leading-tight font-serif font-medium group-hover:underline group-hover:decoration-dashed group-hover:underline-offset-4 group-hover:decoration-1 sm:text-2xl"
      >
        {title}
      </TitleTag>
      <div class="mt-1 text-sm leading-normal">
        <FormattedDate date={new Date(date)} />
        <!-- {updatedDate && (
          <>
            {' '}
            <span>
              (Updated on <FormattedDate date={new Date(updatedDate)} />)
            </span>
          </>
        )} -->
      </div>
      {excerpt && <div class="mt-3 text-sm leading-normal" set:html={excerpt}/>}
    </div>
    <div class="hidden font-serif italic opacity-0 transition group-hover:opacity-100 sm:inline-flex sm:gap-1 sm:items-center sm:shrink-0">
      Read Post <ArrowRight class="fill-current w-4 h-4" />
    </div>
  </a>
  {tags?.edges && tags.edges.length > 0 && (
    <div class="mt-2">
      {tags.edges.map((tag) => (
        <a
          key={tag.node.id}
          class="inline-block px-2 py-1 mr-2 mb-2 text-xs font-medium text-white bg-gray-800 rounded-sm"
          href={tag.node.uri}
        >
          {tag.node.name}
        </a>
      ))}
    </div>
  )}
</div>
